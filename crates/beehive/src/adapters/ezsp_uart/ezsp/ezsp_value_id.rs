use super::*;

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum EzspValueId {
    TokenStackNodeData,
    MacPassthroughFlags,
    EmbernetPassthroughSourceAddress,
    FreeBuffers,
    UartSynchCallbacks,
    MaximumIncomingTransferSize,
    MaximumOutgoingTransferSize,
    StackTokenWriting,
    StackIsPerformingRejoin,
    MacFilterList,
    ExtendedSecurityBitmask,
    NodeShortId,
    DescriptorCapability,
    StackDeviceRequestSequenceNumber,
    RadioHoldOff,
    EndpointFlags,
    MfgSecurityConfig,
    VersionInfo,
    NextHostRejoinReason,
    LastRejoinReason,
    RealRejoinReason,
    NextZigbeeSequenceNumber,
    CcaThreshold,
    SetCounterThreshold,
    ResetCounterThresholds,
    ClearCounters,
    Certificate283k1,
    PublicKey283k1,
    PrivateKey283k1,
    NwkFrameCounter,
    ApsFrameCounter,
    RetryDeviceType,
    EnableR21Behavior,
    AntennaMode,
    EnablePta,
    PtaOptions,
    MfglibOptions,
    UseNegotiatedPowerByLpd,
    PtaPwmOptions,
    PtaDirectionalPriorityPulseWidth,
    PtaPhySelectTimeout,
    AntennaRxMode,
    NwkKeyTimeout,
    ForceTxAfterFailedCcaAttempts,
    TransientKeyTimeoutS,
    CoulombCounterUsage,
    MaxBeaconsToStore,
    EndDeviceTimeoutOptionsMask,
    EndDeviceKeepAliveSupportMode,
    ActiveRadioConfig,
    NwkOpenDuration,
    TransientDeviceTimeout,
    KeyStorageVersion,
    DelayedJoinActivation,
}

impl Decode for EzspValueId {
    fn try_decode_from<B: Buf>(buffer: &mut B) -> Result<Self, DecodeError> {
        if buffer.remaining() < 1 {
            return Err(DecodeError::InsufficientData);
        }
        use EzspValueId::*;
        Ok(match buffer.get_u8() {
            0x00 => TokenStackNodeData,
            0x01 => MacPassthroughFlags,
            0x02 => EmbernetPassthroughSourceAddress,
            0x03 => FreeBuffers,
            0x04 => UartSynchCallbacks,
            0x05 => MaximumIncomingTransferSize,
            0x06 => MaximumOutgoingTransferSize,
            0x07 => StackTokenWriting,
            0x08 => StackIsPerformingRejoin,
            0x09 => MacFilterList,
            0x0A => ExtendedSecurityBitmask,
            0x0B => NodeShortId,
            0x0C => DescriptorCapability,
            0x0D => StackDeviceRequestSequenceNumber,
            0x0E => RadioHoldOff,
            0x0F => EndpointFlags,
            0x10 => MfgSecurityConfig,
            0x11 => VersionInfo,
            0x12 => NextHostRejoinReason,
            0x13 => LastRejoinReason,
            0x14 => RealRejoinReason,
            0x15 => NextZigbeeSequenceNumber,
            0x16 => CcaThreshold,
            0x17 => SetCounterThreshold,
            0x18 => ResetCounterThresholds,
            0x19 => ClearCounters,
            0x1A => Certificate283k1,
            0x1B => PublicKey283k1,
            0x1C => PrivateKey283k1,
            0x23 => NwkFrameCounter,
            0x24 => ApsFrameCounter,
            0x25 => RetryDeviceType,
            0x29 => EnableR21Behavior,
            0x30 => AntennaMode,
            0x31 => EnablePta,
            0x32 => PtaOptions,
            0x33 => MfglibOptions,
            0x34 => UseNegotiatedPowerByLpd,
            0x35 => PtaPwmOptions,
            0x36 => PtaDirectionalPriorityPulseWidth,
            0x37 => PtaPhySelectTimeout,
            0x38 => AntennaRxMode,
            0x39 => NwkKeyTimeout,
            0x3A => ForceTxAfterFailedCcaAttempts,
            0x3B => TransientKeyTimeoutS,
            0x3C => CoulombCounterUsage,
            0x3D => MaxBeaconsToStore,
            0x3E => EndDeviceTimeoutOptionsMask,
            0x3F => EndDeviceKeepAliveSupportMode,
            0x41 => ActiveRadioConfig,
            0x42 => NwkOpenDuration,
            0x43 => TransientDeviceTimeout,
            0x44 => KeyStorageVersion,
            0x45 => DelayedJoinActivation,
            _ => return Err(DecodeError::Invalid),
        })
    }
}

impl Encode for EzspValueId {
    fn encode_to<B: BufMut>(
        &self,
        buffer: &mut B,
    ) {
        use EzspValueId::*;
        buffer.put_u8(match self {
            TokenStackNodeData => 0x00,
            MacPassthroughFlags => 0x01,
            EmbernetPassthroughSourceAddress => 0x02,
            FreeBuffers => 0x03,
            UartSynchCallbacks => 0x04,
            MaximumIncomingTransferSize => 0x05,
            MaximumOutgoingTransferSize => 0x06,
            StackTokenWriting => 0x07,
            StackIsPerformingRejoin => 0x08,
            MacFilterList => 0x09,
            ExtendedSecurityBitmask => 0x0A,
            NodeShortId => 0x0B,
            DescriptorCapability => 0x0C,
            StackDeviceRequestSequenceNumber => 0x0D,
            RadioHoldOff => 0x0E,
            EndpointFlags => 0x0F,
            MfgSecurityConfig => 0x10,
            VersionInfo => 0x11,
            NextHostRejoinReason => 0x12,
            LastRejoinReason => 0x13,
            RealRejoinReason => 0x14,
            NextZigbeeSequenceNumber => 0x15,
            CcaThreshold => 0x16,
            SetCounterThreshold => 0x17,
            ResetCounterThresholds => 0x18,
            ClearCounters => 0x19,
            Certificate283k1 => 0x1A,
            PublicKey283k1 => 0x1B,
            PrivateKey283k1 => 0x1C,
            NwkFrameCounter => 0x23,
            ApsFrameCounter => 0x24,
            RetryDeviceType => 0x25,
            EnableR21Behavior => 0x29,
            AntennaMode => 0x30,
            EnablePta => 0x31,
            PtaOptions => 0x32,
            MfglibOptions => 0x33,
            UseNegotiatedPowerByLpd => 0x34,
            PtaPwmOptions => 0x35,
            PtaDirectionalPriorityPulseWidth => 0x36,
            PtaPhySelectTimeout => 0x37,
            AntennaRxMode => 0x38,
            NwkKeyTimeout => 0x39,
            ForceTxAfterFailedCcaAttempts => 0x3A,
            TransientKeyTimeoutS => 0x3B,
            CoulombCounterUsage => 0x3C,
            MaxBeaconsToStore => 0x3D,
            EndDeviceTimeoutOptionsMask => 0x3E,
            EndDeviceKeepAliveSupportMode => 0x3F,
            ActiveRadioConfig => 0x41,
            NwkOpenDuration => 0x42,
            TransientDeviceTimeout => 0x43,
            KeyStorageVersion => 0x44,
            DelayedJoinActivation => 0x45,
        });
    }
}
