use std::fmt::{Display, Formatter};

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[allow(dead_code)]
pub enum FrameId {
    Version = 0x0000,
    GetLibraryStatus = 0x0001,
    AddEndpoint = 0x0002,
    GetExtendedValue = 0x0003,
    GetNextBeacon = 0x0004,
    Nop = 0x0005,
    Callback = 0x0006,
    NoCallback = 0x0007,
    GetNumStoredBeacons = 0x0008,
    SetToken = 0x0009,
    GetToken = 0x000A,
    GetMfgToken = 0x000B,
    SetMfgToken = 0x000C,
    StackTokenChangedHandler = 0x000D,
    SetTimer = 0x000E,
    TimerHandler = 0x000F,
    SetConcentrator = 0x0010,
    SetBrokenRouteErrorCode = 0x0011,
    DebugWrite = 0x0012,
    GetXncpInfo = 0x0013,
    RequestLinkKey = 0x0014,
    SetManufacturerCode = 0x0015,
    SetPowerDescriptor = 0x0016,
    NetworkInit = 0x0017,
    NetworkState = 0x0018,
    StackStatusHandler = 0x0019,
    StartScan = 0x001A,
    NetworkFoundHandler = 0x001B,
    ScanCompleteHandler = 0x001C,
    FormNetwork = 0x001E,
    JoinNetwork = 0x001F,
    LeaveNetwork = 0x0020,
    FindAndRejoinNetwork = 0x0021,
    PermitJoining = 0x0022,
    ChildJoinHandler = 0x0023,
    TrustCenterJoinHandler = 0x0024,
    GetEui64 = 0x0026,
    GetNodeId = 0x0027,
    GetNetworkParameters = 0x0028,
    GetParentChildParameters = 0x0029,
    ClearBindingTable = 0x002A,
    SetBinding = 0x002B,
    GetBinding = 0x002C,
    DeleteBinding = 0x002D,
    BindingIsActive = 0x002E,
    GetBindingRemoteNodeId = 0x002F,
    SetBindingRemoteNodeId = 0x0030,
    RemoteSetBindingHandler = 0x0031,
    RemoteDeleteBindingHandler = 0x0032,
    MaximumPayloadLength = 0x0033,
    SendUnicast = 0x0034,
    GetDutyCycleState = 0x0035,
    SendBroadcast = 0x0036,
    ProxyBroadcast = 0x0037,
    SendMulticast = 0x0038,
    SendReply = 0x0039,
    SendMulticastWithAlias = 0x003A,
    JoinNetworkDirectly = 0x003B,
    ClearStoredBeacons = 0x003C,
    GetFirstBeacon = 0x003D,
    GetNeighborFrameCounter = 0x003E,
    MessageSentHandler = 0x003F,
    SetDutyCycleLimitsInStack = 0x0040,
    SendManyToOneRouteRequest = 0x0041,
    PollForData = 0x0042,
    PollCompleteHandler = 0x0043,
    PollHandler = 0x0044,
    IncomingMessageHandler = 0x0045,
    MacFilterMatchMessageHandler = 0x0046,
    CustomFrame = 0x0047,
    EnergyScanResultHandler = 0x0048,
    GetRandomNumber = 0x0049,
    GetChildData = 0x004A,
    GetDutyCycleLimits = 0x004B,
    GetCurrentDutyCycle = 0x004C,
    DutyCycleHandler = 0x004D,
    GetTimer = 0x004E,
    GetTrueRandomEntropySource = 0x004F,
    UnicastCurrentNetworkKey = 0x0050,
    SendRawMessageExtended = 0x0051,
    GetConfigurationValue = 0x0052,
    SetConfigurationValue = 0x0053,
    CustomFrameHandler = 0x0054,
    SetPolicy = 0x0055,
    GetPolicy = 0x0056,
    SendPanIdUpdate = 0x0057,
    InvalidCommand = 0x0058,
    SetSourceRouteDiscoveryMode = 0x005A,
    AddressTableEntryIsActive = 0x005B,
    SetAddressTableRemoteEui64 = 0x005C,
    SetAddressTableRemoteNodeId = 0x005D,
    GetAddressTableRemoteEui64 = 0x005E,
    GetAddressTableRemoteNodeId = 0x005F,
    LookupNodeIdByEui64 = 0x0060,
    LookupEui64ByNodeId = 0x0061,
    IncomingSenderEui64Handler = 0x0062,
    GetMulticastTableEntry = 0x0063,
    SetMulticastTableEntry = 0x0064,
    ReadAndClearCounters = 0x0065,
    SendTrustCenterLinkKey = 0x0067,
    SetInitialSecurityState = 0x0068,
    GetCurrentSecurityState = 0x0069,
    ClearTransientLinkKeys = 0x006B,
    UpdateTcLinkKey = 0x006C,
    SwitchNetworkKeyHandler = 0x006E,
    AesMmoHash = 0x006F,
    BroadcastNextNetworkKey = 0x0073,
    BroadcastNetworkKeySwitch = 0x0074,
    FindKeyTableEntry = 0x0075,
    EraseKeyTableEntry = 0x0076,
    DsaVerifyHandler = 0x0078,
    GetNeighbor = 0x0079,
    NeighborCount = 0x007A,
    GetRouteTableEntry = 0x007B,
    IdConflictHandler = 0x007C,
    IncomingManyToOneRouteRequestHandler = 0x007D,
    SetExtendedTimeout = 0x007E,
    GetExtendedTimeout = 0x007F,
    IncomingRouteErrorHandler = 0x0080,
    Echo = 0x0081,
    ReplaceAddressTableEntry = 0x0082,
    SetRadioIeee802154CcaMode = 0x0095,
    SendRawMessage = 0x0096,
    MacPassthroughMessageHandler = 0x0097,
    RawTransmitCompleteHandler = 0x0098,
    SetRadioPower = 0x0099,
    SetRadioChannel = 0x009A,
    ZigbeeKeyEstablishmentHandler = 0x009B,
    EnergyScanRequest = 0x009C,
    DelayTest = 0x009D,
    GenerateCbkeKeysHandler = 0x009E,
    CalculateSmacs = 0x009F,
    CalculateSmacsHandler = 0x00A0,
    ClearTemporaryDataMaybeStoreLinkKey = 0x00A1,
    SetPreinstalledCbkeData = 0x00A2,
    DsaVerify = 0x00A3,
    GetCertificate = 0x00A5,
    DsaSign = 0x00A6,
    DsaSignHandler = 0x00A7,
    RemoveDevice = 0x00A8,
    UnicastNwkKeyUpdate = 0x00A9,
    GenerateCbkeKeys = 0x00A4,
    GetValue = 0x00AA,
    SetValue = 0x00AB,
    SetChildData = 0x00AC,
    SetNeighborFrameCounter = 0x00AD,
    DsaVerify283k1 = 0x00B0,
    ClearKeyTable = 0x00B1,
    SetLogicalAndRadioChannel = 0x00B9,
    SetLogicalChannel = 0x00BA,
    GetSourceRouteTableEntry = 0x00C1,
    GetSourceRouteTableFilledSize = 0x00C2,
    GetSourceRouteTableTotalSize = 0x00C3,
    IncomingNetworkStatusHandler = 0x00C4,
    SetRoutingShortcutThreshold = 0x00D0,
    GetRoutingShortcutThreshold = 0x00D1,
    UnusedPanIdFoundHandler = 0x00D2,
    FindUnusedPanId = 0x00D3,
    GenerateCbkeKeys283k1 = 0x00E8,
    GenerateCbkeKeysHandler283k1 = 0x00E9,
    CalculateSmacs283k1 = 0x00EA,
    CalculateSmacsHandler283k1 = 0x00EB,
    GetCertificate283k1 = 0x00EC,
    SavePreinstalledCbkeData283k1 = 0x00ED,
    ClearTemporaryDataMaybeStoreLinkKey283k1 = 0x00EE,
    SetBeaconClassificationParams = 0x00EF,
    ReadCounters = 0x00F1,
    CounterRolloverHandler = 0x00F2,
    GetBeaconClassificationParams = 0x00F3,
    SetMacPollFailureWaitTime = 0x00F4,
    SendLinkPowerDeltaRequest = 0x00F7,
    MultiPhyStart = 0x00F8,
    MultiPhyStop = 0x00F9,
    MultiPhySetRadioPower = 0x00FA,
    MultiPhySetRadioChannel = 0x00FB,
    GetPhyInterfaceCount = 0x00FC,
    GetRadioParameters = 0x00FD,
    WriteNodeData = 0x00FE,
    GetRadioChannel = 0x00FF,
    SetPassiveAckConfig = 0x0105,
    ChildId = 0x0106,
    Id = 0x0107,
    ReadAttribute = 0x0108,
    WriteAttribute = 0x0109,
    GetApsKeyInfo = 0x010C,
    ExportLinkKeyByEui = 0x010D,
    ImportLinkKey = 0x010E,
    ExportLinkKeyByIndex = 0x010F,
    CheckKeyContext = 0x0110,
    ImportTransientKey = 0x0111,
    ExportTransientKeyByIndex = 0x0112,
    ExportTransientKeyByEui = 0x0113,
    ExportKey = 0x0114,
    ImportKey = 0x0115,
    GetNetworkKeyInfo = 0x0116,
}

impl Into<u16> for FrameId {
    fn into(self) -> u16 {
        self as u16
    }
}

impl TryFrom<u16> for FrameId {
    type Error = u16;

    fn try_from(x: u16) -> Result<Self, Self::Error> {
        use FrameId::*;
        Ok(match x {
            x if x == Version as u16 => Version,
            x if x == GetLibraryStatus as u16 => GetLibraryStatus,
            x if x == AddEndpoint as u16 => AddEndpoint,
            x if x == GetExtendedValue as u16 => GetExtendedValue,
            x if x == GetNextBeacon as u16 => GetNextBeacon,
            x if x == Nop as u16 => Nop,
            x if x == Callback as u16 => Callback,
            x if x == NoCallback as u16 => NoCallback,
            x if x == GetNumStoredBeacons as u16 => GetNumStoredBeacons,
            x if x == SetToken as u16 => SetToken,
            x if x == GetToken as u16 => GetToken,
            x if x == GetMfgToken as u16 => GetMfgToken,
            x if x == SetMfgToken as u16 => SetMfgToken,
            x if x == StackTokenChangedHandler as u16 => StackTokenChangedHandler,
            x if x == SetTimer as u16 => SetTimer,
            x if x == TimerHandler as u16 => TimerHandler,
            x if x == SetConcentrator as u16 => SetConcentrator,
            x if x == SetBrokenRouteErrorCode as u16 => SetBrokenRouteErrorCode,
            x if x == DebugWrite as u16 => DebugWrite,
            x if x == GetXncpInfo as u16 => GetXncpInfo,
            x if x == RequestLinkKey as u16 => RequestLinkKey,
            x if x == SetManufacturerCode as u16 => SetManufacturerCode,
            x if x == SetPowerDescriptor as u16 => SetPowerDescriptor,
            x if x == NetworkInit as u16 => NetworkInit,
            x if x == NetworkState as u16 => NetworkState,
            x if x == StackStatusHandler as u16 => StackStatusHandler,
            x if x == StartScan as u16 => StartScan,
            x if x == NetworkFoundHandler as u16 => NetworkFoundHandler,
            x if x == ScanCompleteHandler as u16 => ScanCompleteHandler,
            x if x == FormNetwork as u16 => FormNetwork,
            x if x == JoinNetwork as u16 => JoinNetwork,
            x if x == LeaveNetwork as u16 => LeaveNetwork,
            x if x == FindAndRejoinNetwork as u16 => FindAndRejoinNetwork,
            x if x == PermitJoining as u16 => PermitJoining,
            x if x == ChildJoinHandler as u16 => ChildJoinHandler,
            x if x == TrustCenterJoinHandler as u16 => TrustCenterJoinHandler,
            x if x == GetEui64 as u16 => GetEui64,
            x if x == GetNodeId as u16 => GetNodeId,
            x if x == GetNetworkParameters as u16 => GetNetworkParameters,
            x if x == GetParentChildParameters as u16 => GetParentChildParameters,
            x if x == ClearBindingTable as u16 => ClearBindingTable,
            x if x == SetBinding as u16 => SetBinding,
            x if x == GetBinding as u16 => GetBinding,
            x if x == DeleteBinding as u16 => DeleteBinding,
            x if x == BindingIsActive as u16 => BindingIsActive,
            x if x == GetBindingRemoteNodeId as u16 => GetBindingRemoteNodeId,
            x if x == SetBindingRemoteNodeId as u16 => SetBindingRemoteNodeId,
            x if x == RemoteSetBindingHandler as u16 => RemoteSetBindingHandler,
            x if x == RemoteDeleteBindingHandler as u16 => RemoteDeleteBindingHandler,
            x if x == MaximumPayloadLength as u16 => MaximumPayloadLength,
            x if x == SendUnicast as u16 => SendUnicast,
            x if x == GetDutyCycleState as u16 => GetDutyCycleState,
            x if x == SendBroadcast as u16 => SendBroadcast,
            x if x == ProxyBroadcast as u16 => ProxyBroadcast,
            x if x == SendMulticast as u16 => SendMulticast,
            x if x == SendReply as u16 => SendReply,
            x if x == SendMulticastWithAlias as u16 => SendMulticastWithAlias,
            x if x == JoinNetworkDirectly as u16 => JoinNetworkDirectly,
            x if x == ClearStoredBeacons as u16 => ClearStoredBeacons,
            x if x == GetFirstBeacon as u16 => GetFirstBeacon,
            x if x == GetNeighborFrameCounter as u16 => GetNeighborFrameCounter,
            x if x == MessageSentHandler as u16 => MessageSentHandler,
            x if x == SetDutyCycleLimitsInStack as u16 => SetDutyCycleLimitsInStack,
            x if x == SendManyToOneRouteRequest as u16 => SendManyToOneRouteRequest,
            x if x == PollForData as u16 => PollForData,
            x if x == PollCompleteHandler as u16 => PollCompleteHandler,
            x if x == PollHandler as u16 => PollHandler,
            x if x == IncomingMessageHandler as u16 => IncomingMessageHandler,
            x if x == MacFilterMatchMessageHandler as u16 => MacFilterMatchMessageHandler,
            x if x == CustomFrame as u16 => CustomFrame,
            x if x == EnergyScanResultHandler as u16 => EnergyScanResultHandler,
            x if x == GetRandomNumber as u16 => GetRandomNumber,
            x if x == GetChildData as u16 => GetChildData,
            x if x == GetDutyCycleLimits as u16 => GetDutyCycleLimits,
            x if x == GetCurrentDutyCycle as u16 => GetCurrentDutyCycle,
            x if x == DutyCycleHandler as u16 => DutyCycleHandler,
            x if x == GetTimer as u16 => GetTimer,
            x if x == GetTrueRandomEntropySource as u16 => GetTrueRandomEntropySource,
            x if x == UnicastCurrentNetworkKey as u16 => UnicastCurrentNetworkKey,
            x if x == SendRawMessageExtended as u16 => SendRawMessageExtended,
            x if x == GetConfigurationValue as u16 => GetConfigurationValue,
            x if x == SetConfigurationValue as u16 => SetConfigurationValue,
            x if x == CustomFrameHandler as u16 => CustomFrameHandler,
            x if x == SetPolicy as u16 => SetPolicy,
            x if x == GetPolicy as u16 => GetPolicy,
            x if x == SendPanIdUpdate as u16 => SendPanIdUpdate,
            x if x == InvalidCommand as u16 => InvalidCommand,
            x if x == SetSourceRouteDiscoveryMode as u16 => SetSourceRouteDiscoveryMode,
            x if x == AddressTableEntryIsActive as u16 => AddressTableEntryIsActive,
            x if x == SetAddressTableRemoteEui64 as u16 => SetAddressTableRemoteEui64,
            x if x == SetAddressTableRemoteNodeId as u16 => SetAddressTableRemoteNodeId,
            x if x == GetAddressTableRemoteEui64 as u16 => GetAddressTableRemoteEui64,
            x if x == GetAddressTableRemoteNodeId as u16 => GetAddressTableRemoteNodeId,
            x if x == LookupNodeIdByEui64 as u16 => LookupNodeIdByEui64,
            x if x == LookupEui64ByNodeId as u16 => LookupEui64ByNodeId,
            x if x == IncomingSenderEui64Handler as u16 => IncomingSenderEui64Handler,
            x if x == GetMulticastTableEntry as u16 => GetMulticastTableEntry,
            x if x == SetMulticastTableEntry as u16 => SetMulticastTableEntry,
            x if x == ReadAndClearCounters as u16 => ReadAndClearCounters,
            x if x == SendTrustCenterLinkKey as u16 => SendTrustCenterLinkKey,
            x if x == SetInitialSecurityState as u16 => SetInitialSecurityState,
            x if x == GetCurrentSecurityState as u16 => GetCurrentSecurityState,
            x if x == ClearTransientLinkKeys as u16 => ClearTransientLinkKeys,
            x if x == UpdateTcLinkKey as u16 => UpdateTcLinkKey,
            x if x == SwitchNetworkKeyHandler as u16 => SwitchNetworkKeyHandler,
            x if x == AesMmoHash as u16 => AesMmoHash,
            x if x == BroadcastNextNetworkKey as u16 => BroadcastNextNetworkKey,
            x if x == BroadcastNetworkKeySwitch as u16 => BroadcastNetworkKeySwitch,
            x if x == FindKeyTableEntry as u16 => FindKeyTableEntry,
            x if x == EraseKeyTableEntry as u16 => EraseKeyTableEntry,
            x if x == DsaVerifyHandler as u16 => DsaVerifyHandler,
            x if x == GetNeighbor as u16 => GetNeighbor,
            x if x == NeighborCount as u16 => NeighborCount,
            x if x == GetRouteTableEntry as u16 => GetRouteTableEntry,
            x if x == IdConflictHandler as u16 => IdConflictHandler,
            x if x == IncomingManyToOneRouteRequestHandler as u16 => {
                IncomingManyToOneRouteRequestHandler
            }
            x if x == SetExtendedTimeout as u16 => SetExtendedTimeout,
            x if x == GetExtendedTimeout as u16 => GetExtendedTimeout,
            x if x == IncomingRouteErrorHandler as u16 => IncomingRouteErrorHandler,
            x if x == Echo as u16 => Echo,
            x if x == ReplaceAddressTableEntry as u16 => ReplaceAddressTableEntry,
            x if x == SetRadioIeee802154CcaMode as u16 => SetRadioIeee802154CcaMode,
            x if x == SendRawMessage as u16 => SendRawMessage,
            x if x == MacPassthroughMessageHandler as u16 => MacPassthroughMessageHandler,
            x if x == RawTransmitCompleteHandler as u16 => RawTransmitCompleteHandler,
            x if x == SetRadioPower as u16 => SetRadioPower,
            x if x == SetRadioChannel as u16 => SetRadioChannel,
            x if x == ZigbeeKeyEstablishmentHandler as u16 => ZigbeeKeyEstablishmentHandler,
            x if x == EnergyScanRequest as u16 => EnergyScanRequest,
            x if x == DelayTest as u16 => DelayTest,
            x if x == GenerateCbkeKeysHandler as u16 => GenerateCbkeKeysHandler,
            x if x == CalculateSmacs as u16 => CalculateSmacs,
            x if x == CalculateSmacsHandler as u16 => CalculateSmacsHandler,
            x if x == ClearTemporaryDataMaybeStoreLinkKey as u16 => {
                ClearTemporaryDataMaybeStoreLinkKey
            }
            x if x == SetPreinstalledCbkeData as u16 => SetPreinstalledCbkeData,
            x if x == DsaVerify as u16 => DsaVerify,
            x if x == GetCertificate as u16 => GetCertificate,
            x if x == DsaSign as u16 => DsaSign,
            x if x == DsaSignHandler as u16 => DsaSignHandler,
            x if x == RemoveDevice as u16 => RemoveDevice,
            x if x == UnicastNwkKeyUpdate as u16 => UnicastNwkKeyUpdate,
            x if x == GenerateCbkeKeys as u16 => GenerateCbkeKeys,
            x if x == GetValue as u16 => GetValue,
            x if x == SetValue as u16 => SetValue,
            x if x == SetChildData as u16 => SetChildData,
            x if x == SetNeighborFrameCounter as u16 => SetNeighborFrameCounter,
            x if x == DsaVerify283k1 as u16 => DsaVerify283k1,
            x if x == ClearKeyTable as u16 => ClearKeyTable,
            x if x == SetLogicalAndRadioChannel as u16 => SetLogicalAndRadioChannel,
            x if x == SetLogicalChannel as u16 => SetLogicalChannel,
            x if x == GetSourceRouteTableEntry as u16 => GetSourceRouteTableEntry,
            x if x == GetSourceRouteTableFilledSize as u16 => GetSourceRouteTableFilledSize,
            x if x == GetSourceRouteTableTotalSize as u16 => GetSourceRouteTableTotalSize,
            x if x == IncomingNetworkStatusHandler as u16 => IncomingNetworkStatusHandler,
            x if x == SetRoutingShortcutThreshold as u16 => SetRoutingShortcutThreshold,
            x if x == GetRoutingShortcutThreshold as u16 => GetRoutingShortcutThreshold,
            x if x == UnusedPanIdFoundHandler as u16 => UnusedPanIdFoundHandler,
            x if x == FindUnusedPanId as u16 => FindUnusedPanId,
            x if x == GenerateCbkeKeys283k1 as u16 => GenerateCbkeKeys283k1,
            x if x == GenerateCbkeKeysHandler283k1 as u16 => GenerateCbkeKeysHandler283k1,
            x if x == CalculateSmacs283k1 as u16 => CalculateSmacs283k1,
            x if x == CalculateSmacsHandler283k1 as u16 => CalculateSmacsHandler283k1,
            x if x == GetCertificate283k1 as u16 => GetCertificate283k1,
            x if x == SavePreinstalledCbkeData283k1 as u16 => SavePreinstalledCbkeData283k1,
            x if x == ClearTemporaryDataMaybeStoreLinkKey283k1 as u16 => {
                ClearTemporaryDataMaybeStoreLinkKey283k1
            }
            x if x == SetBeaconClassificationParams as u16 => SetBeaconClassificationParams,
            x if x == ReadCounters as u16 => ReadCounters,
            x if x == CounterRolloverHandler as u16 => CounterRolloverHandler,
            x if x == GetBeaconClassificationParams as u16 => GetBeaconClassificationParams,
            x if x == SetMacPollFailureWaitTime as u16 => SetMacPollFailureWaitTime,
            x if x == SendLinkPowerDeltaRequest as u16 => SendLinkPowerDeltaRequest,
            x if x == MultiPhyStart as u16 => MultiPhyStart,
            x if x == MultiPhyStop as u16 => MultiPhyStop,
            x if x == MultiPhySetRadioPower as u16 => MultiPhySetRadioPower,
            x if x == MultiPhySetRadioChannel as u16 => MultiPhySetRadioChannel,
            x if x == GetPhyInterfaceCount as u16 => GetPhyInterfaceCount,
            x if x == GetRadioParameters as u16 => GetRadioParameters,
            x if x == WriteNodeData as u16 => WriteNodeData,
            x if x == GetRadioChannel as u16 => GetRadioChannel,
            x if x == SetPassiveAckConfig as u16 => SetPassiveAckConfig,
            x if x == ChildId as u16 => ChildId,
            x if x == Id as u16 => Id,
            x if x == ReadAttribute as u16 => ReadAttribute,
            x if x == WriteAttribute as u16 => WriteAttribute,
            x if x == GetApsKeyInfo as u16 => GetApsKeyInfo,
            x if x == ExportLinkKeyByEui as u16 => ExportLinkKeyByEui,
            x if x == ImportLinkKey as u16 => ImportLinkKey,
            x if x == ExportLinkKeyByIndex as u16 => ExportLinkKeyByIndex,
            x if x == CheckKeyContext as u16 => CheckKeyContext,
            x if x == ImportTransientKey as u16 => ImportTransientKey,
            x if x == ExportTransientKeyByIndex as u16 => ExportTransientKeyByIndex,
            x if x == ExportTransientKeyByEui as u16 => ExportTransientKeyByEui,
            x if x == ExportKey as u16 => ExportKey,
            x if x == ImportKey as u16 => ImportKey,
            x if x == GetNetworkKeyInfo as u16 => GetNetworkKeyInfo,
            _ => return Err(x),
        })
    }
}

impl TryFrom<u8> for FrameId {
    type Error = u16;

    fn try_from(x: u8) -> Result<Self, Self::Error> {
        FrameId::try_from(x as u16)
    }
}

impl Display for FrameId {
    fn fmt(
        &self,
        f: &mut Formatter,
    ) -> std::fmt::Result {
        write!(f, "{:02X}", *self as u16)
    }
}
